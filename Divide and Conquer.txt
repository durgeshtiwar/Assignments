1.
#include<iostream>
#include<ctime>
using namespace std;
int getRandom(int x,int y)
{
    srand(time(NULL));
    return (x+rand()%(y-x+1));
}
int Findelement(int a[],int l,int r,int si)
{
    if(r>=l)
    {
    int R=getRandom(l,r);
    cout<<R<<endl;
    if(a[R]==si)
        return R;
    if(a[R]>si)
        return Findelement(a,l,R-1,si);
    return Findelement(a,R+1,r,si);
    }
    return -1;
}
int main()
{
    int a[]={3,6,7,9,17};
    int n=sizeof(a)/sizeof(a[0]);
    int si;
    cout<<"Enter the no. you want to find";
    cin>>si;
    int result=Findelement(a,0,n-1,si);
    if(result == -1)
        cout<<"Element not found";
    else
        cout<<"Element fount at index"<<result;
    return 0;
}
2.
#include<iostream>
using namespace std;
int MergeSort(int*,int*,int ,int);
int Merge(int*,int*,int,int,int,int);
int inversionCount(int a[],int n)
{
    int temp[n];
    return MergeSort(a,temp,0,n-1);
}
int MergeSort(int a[],int temp[],int i,int j)
{
    int mid=(i+j)/2;
    int c;
    if(i<j)
    {
         MergeSort(a,temp,i,mid);
         MergeSort(a,temp,mid+1,j);
        c += Merge(a,temp,i,mid,mid+1,j);
    }
    return c;
}
int Merge(int a[],int temp[],int s1,int e1,int s2,int e2)
{
    int i=s1,j=s2,k=0,c=0;
    while(i<=e1 && j<=e2)
    {
        if(a[i]<=a[j])
        {
            temp[k]=a[i];
            i++,k++;
        }
        else
        {
            temp[k]=a[j];
            j++,k++;
            c=c+(e1+1);
        }
    }
    while(i<=e1)
    {
        temp[k]=a[i];
        i++,k++;
    }
    while(j<=e2)
    {
        temp[k]=a[j];
        j++,k++;
    }
    for(k=0,i=s1;i<=e2;i++,k++)
    {
        a[i]=temp[k];
    }
    return c;
}
int main()
{
    int a[]={2,4,1,3,5};
    int n=sizeof(a)/sizeof(a[0]);
    int result=inversionCount(a,n);
    cout<<"Inversion count is "<<result;
    return 0;
}
3.
#include<iostream>
using namespace std;
int findExatlyone(int a[],int l,int r)
{
    int mid=(l+r)/2;
    if(l==r)
        return a[l];
    if(mid%2==0)
    {
        if(a[mid]==a[mid+1])
            findExatlyone(a,mid+2,r);
        else
            findExatlyone(a,l,mid);
    }
    else
    {
        if(a[mid]==a[mid-1])
            findExatlyone(a,mid+1,r);
        else
            findExatlyone(a,l,mid-1);
    }
}
int main()
{
    int a[]={1,1,2,2,3,3,4,50,50,65,65};
    int n=sizeof(a)/sizeof(a[0]);
    int result=findExatlyone(a,0,n-1);
    cout<<result<<" is the only element that appears exactly once.";
    return 0;
}
4.
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;
long squareSeries(long n)
{
	return(n * (n + 1) * (2 * n + 1)) / 6;
}

long maxPeople(long n)
{
	long low = 0;
	long high = 1000000L;
	long ans = 0L;

	while (low <= high)
	{
		long mid = low + ((high - low) / 2);
		long value = squareSeries(mid);

		if (value <= n)
		{
			ans = mid;
			low = mid + 1;
		}
		else
		{
			high = mid - 1;
		}
	}
	return ans;
}

int main()
{
	long p = 14;

	cout<<maxPeople(p);
	return 0;
}

