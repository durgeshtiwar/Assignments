 2.
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;
class event
{
public:
    int start,finish;
};
bool cmp(event e1,event e2)
{
    return (e1.finish<e2.finish);
}
int main()
{
    int n=6;
    event e[n]={{6,11},{5,7},{1,4},{9,12},{3,6},{8,9}};
    sort(e,e+n,cmp);
    int current=0;
    cout<<e[current].start<<" : "<<e[current].finish<<endl;
    for(int next=1 ; next<n ; next++)
    {
        if((e[current].finish)<=e[next].start)
        {
            cout<<e[next].start<<" : "<<e[next].finish<<endl;
            current=next;
        }
    }
    return 0;
}
3.
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cout<<"Enter the Size of Array:"<<endl;
    cin>>n;
    vector<int>a(n);
    cout<<"Enter the value in Array:"<<endl;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    sort(a.begin(),a.end());
    int j=n-1;
    int Max=0,Min=0;
    for(int i=0;i<n/2;i++)
    {
        Max=Max+abs(a[i]-a[j]);
        Min=Min+abs(a[2*i]-a[2*i+1]);
        j--;
    }
    cout<<"Maximum of Array is : "<<Max<<endl<<"Minimum of Array is : "<<Min;
    return 0;
}
4.
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int arr[]={900,940,450,1100,1500,1800};
    int dep[]={910,1200,1120,1130,1900,2000};
    vector<pair<int,int>>v(6);
    for(int i=0;i<6;i++)
    {
        v[i]={arr[i],dep[i]};
    }
    sort(v.begin(),v.end());
    priority_queue<int,vector<int>,greater<int>>pq;
    int cnt=1;
    pq.push(v[0].second);
    for(int i=1;i<6;i++)
    {
        if(pq.top()>=v[i].first)
        {
            cnt++;
            pq.push(v[i].second);
        }
    else
    {
        pq.pop();
        pq.push(v[i].second);
    }
    }
    cout<<"No.of Platform needed : "<<cnt;
    return 0;
}
5.
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int rop[6]={4,6,3,5,7,2};
    priority_queue<int,vector<int>,greater<int>>pq;
    int length=0;
    for(int i=0;i<6;i++)
    {
        pq.push(rop[i]);
    }
    while(pq.size()>1)
    {
        int x=pq.top();
        pq.pop();
        int y=pq.top();
        pq.pop();
        length=length+(x+y);
        pq.push(x+y);
    }
    cout<<"Minimum cost of Ropes is : "<<length;
    return 0;
}
6.
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;
class Item
{
public:
    int value;
    int weight;
};
bool abc(Item i1,Item i2)
{
    float p1=i1.value/i1.weight;
    float p2=i2.value/i2.weight;
    return p1>p2;
}
int main()
{
    int n=5;
    Item a[n]={{21,7},{24,4},{12,6},{40,5},{30,6}};
    int wt=20,amount=0;
    sort(a,a+n,abc);
    for(int i=0;i<n;i++)
    {
        if(a[i].weight<=wt)
        {
            wt=wt-a[i].weight;
            amount=amount+a[i].value;
        }
        else
        {
            amount=amount+(a[i].value/a[i].weight)*wt;
             break;
        }
    }
    cout<<"Total amount is : "<<amount;
    return 0;
}
7.
#include <bits/stdc++.h>
using namespace std;
#define N 3
int getMin(int arr[])
{
    int minInd = 0;
    for (int i = 1; i < N; i++)
        if (arr[i] < arr[minInd])
            minInd = i;
    return minInd;
}
int getMax(int arr[])
{
    int maxInd = 0;
    for (int i = 1; i < N; i++)
        if (arr[i] > arr[maxInd])
            maxInd = i;
    return maxInd;
}
int minOf2(int x, int y) { return (x < y) ? x : y; }
void minCashFlowRec(int amount[])
{
    int mxCredit = getMax(amount), mxDebit = getMin(amount);
    if (amount[mxCredit] == 0 && amount[mxDebit] == 0)
        return;
    int min = minOf2(-amount[mxDebit], amount[mxCredit]);
    amount[mxCredit] -= min;
    amount[mxDebit] += min;
    cout << "Person " << mxDebit << " pays " << min
         << " to "
         << "Person " << mxCredit << endl;
    minCashFlowRec(amount);
}
void minCashFlow(int graph[][N])
{
    int amount[N] = { 0 };
    for (int p = 0; p < N; p++)
        for (int i = 0; i < N; i++)
            amount[p] += (graph[i][p] - graph[p][i]);

    minCashFlowRec(amount);
}
int main()
{
    int graph[N][N] = {
        { 0, 1000, 2000 },
        { 0, 0, 5000 },
        { 0, 0, 0 },
    };
    minCashFlow(graph);
    return 0;
}
8.
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int i,j,n=9,Min=0,Max=0,k=3;
    int price[n]={3,2,1,4,5,7,6,9,8};
    vector<int>v(9);
    for(i=0;i<n;i++)
    {
        v[i]=price[i];
    }
    sort(v.begin(),v.end());
    for(i=0;i<n;i++)
    {
        Min=Min+v[i];
        n=n-k;
    }
    cout<<"Minimum amount of money : "<<Min<<endl;
    j=0;
    n=9;
    for(i=n-1;i>=j;i--)
    {
        Max=Max+v[i];
        j=j+k;
    }
    cout<<"Maximun amount of money : "<<Max<<endl;
    return 0;
}
9.
#include <bits/stdc++.h>
using namespace std;
int main()
{
    stack<int>s1;
    stack<int>s2;
    stack<int>s3;
    s1.push(1);
    s1.push(1);
    s1.push(1);
    s1.push(2);
    s1.push(3);
    int sum=0,n,a=0;
    cout<<"How many element want to remove in first stack : ";
    cin>>n;
    for(int i=0;i<n;i++)
    {
        a=a+s1.top();
        s1.pop();
    }
    while(!s1.empty())
    {
        sum=sum+s1.top();
        s1.pop();
    }
    cout<<(sum+a)-a<<endl;
    s2.push(2);
    s2.push(3);
    s2.push(4);
    sum=0;
    a=0;
    cout<<"How many element want to remove in second stack : ";
    cin>>n;
    for(int i=0;i<n;i++)
    {
        a=a+s2.top();
        s2.pop();
    }
    while(!s2.empty())
    {
        sum=sum+s2.top();
        s2.pop();
    }
    cout<<(sum+a)-a<<endl;
    s3.push(1);
    s3.push(4);
    s3.push(5);
    s3.push(2);
    sum=0;
    a=0;
    cout<<"How many element want to remove in third stack : ";
    cin>>n;
    for(int i=0;i<n;i++)
    {
        a=a+s3.top();
        s3.pop();
    }
    while(!s3.empty())
    {
        sum=sum+s3.top();
        s3.pop();
    }
    cout<<(sum+a)-a;
    return 0;
}

